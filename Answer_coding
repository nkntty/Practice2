//Question5//
#include <iostream>
#include <fstream>
#include <unordered_map>
#include <string>
using namespace std;

int main() {
    string filename;
    ifstream file;

    do {
        cout << "Enter filename: ";
        cin >> filename;
        file.open(filename);
    } while (!file);

    unordered_map<string, int> wordCount;
    string word;

    while (file >> word) {
        wordCount[word]++;
    }

    for (const auto& pair : wordCount) {
        cout << pair.first << " " << pair.second << endl;
    }

    return 0;
}
__________________________________________________________________________________________________________________________________________________________
//Question6//
int countInStack(Stack<int>& s, int target) {
    int count = 0;
    int size = 0;

    while (!s.isEmpty()) {
        int val = s.top();
        s.pop();
        if (val == target) count++;
        size++;
    }

    // Restore original stack
    for (int i = 0; i < size; ++i) {
        s.push(val);  // assuming some temp buffer, or could not do exactly in constant space
    }

    return count;
}
//Parametor "Stack<int>& s" is with template T(int this case, int). 
_________________________________________________________________________________________________________________________________________________________
//Question7//
struct AVLNode {
    int data;
    int height;
    int size;
    AVLNode* left;
    AVLNode* right;
};

int findNth(AVLNode* root, int n) {
    if (!root) return -1;

    int leftSize = root->left ? root->left->size : 0;

    if (n < leftSize) return findNth(root->left, n);
    else if (n == leftSize) return root->data;
    else return findNth(root->right, n - leftSize - 1);
}

❌ Issues in your code:
Incorrect logic for indexing:

root->size is the total number of nodes in the subtree, not the index of root->data in sorted order.


"? syntax"     (condition) ? (value_if_true) : (value_if_false);
int leftSize = root->left ? root->left->size : 0;      root->left in condition means if the pointer is nullptr or not
"Without ?"
int leftSize;
if (root->left != nullptr) {
    leftSize = root->left->size;
} else {
    leftSize = 0;
}







________________________________________________________________________________________________________________________________________________________
//Question9//
class Equipment {
protected:
    std::string serial;
public:
    Equipment(std::string s) : serial(s) {}
    virtual void print() const = 0;
    std::string getSerial() const { return serial; }
    virtual ~Equipment() {}
};

class Laptop : public Equipment {
    int ram;
public:
    Laptop(std::string s, int r) : Equipment(s), ram(r) {}
    void print() const override {
        std::cout << "Laptop SN: " << serial << ", RAM: " << ram << "GB\n";
    }
};

class Projector : public Equipment {
    int bulbLife;
public:
    Projector(std::string s, int b) : Equipment(s), bulbLife(b) {}
    void print() const override {
        std::cout << "Projector SN: " << serial << ", Bulb Life: " << bulbLife << " hrs\n";
    }
};



#include <vector>

class Composite {
    std::vector<Equipment*> devices;
public:
    void printItem(int index) const {
        if (index >= 0 && index < devices.size())
            devices[index]->print();
    }

    Composite& operator+=(Equipment* e) {
        devices.push_back(e);
        return *this;
    }

    ~Composite() {
        for (auto d : devices) delete d;
    }
};




✅ Sample Usage:
int main() {
    Composite network;

    network += new Laptop("LAP123", 16);
    network += new Projector("PROJ456", 2000);

    network.printItem(0);
    network.printItem(1);
}


